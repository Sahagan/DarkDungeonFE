import { environment } from "@environments/environment";
//volume control
let MusicVolume: number = 0.1;
let EffectVolume: number = 0.1;

//bg music status
let isPlaying = false;
let wasPlayingBefore = false;

//effect sound
let buttonSound = new Audio('../../../assets/sound/pop.mp3');
let rainEffect = new Audio('../../../assets/sound/soft-rain-ambient-111154.mp3');
let สวัสดีค้าบ = new Audio('../../../assets/sound/สวัสดดีค้าบ.mp3');
let dialogEffect = new Audio('../../../assets/sound/dialog.mp3')
rainEffect.loop = true;
buttonSound.volume = EffectVolume;
rainEffect.volume = EffectVolume;
สวัสดีค้าบ.volume = EffectVolume;
dialogEffect.volume = EffectVolume;
dialogEffect.loop = true;
//music
let bgMusic = new Audio('../../../assets/sound/Title Theme/xDeviruchi - Title Theme (Loop).wav');
let bgMusicEnd = new Audio('../../../assets/sound/Title Theme/xDeviruchi - Title Theme (End).wav');
let NameInputMusic = new Audio('../../../assets/sound/WhatsYourName_David Fesliyan.mp3');
let prologue = new Audio('../../../assets/sound/prologue.wav');
bgMusic.volume = MusicVolume;
bgMusicEnd.volume = MusicVolume;
NameInputMusic.volume = MusicVolume;
prologue.volume = MusicVolume;
bgMusic.loop = true; // Set the music to loop
NameInputMusic.loop = true;
prologue.loop = true;

export function getDomain() {
    try {
        return `${environment.backend}`
    } catch (error) {
        return `Can not get endpoint error : ${error}`;
    }
};

export function getUrl(endpoint: string) {
    try {
        switch (endpoint) {
            case 'username':
                return `${environment.backend}${environment.url.username}`;
            case 'items':
                return `${environment.backend}${environment.url.items}`;
            case 'map':
                return `${environment.backend}${environment.url.map}`;
            default:
                throw 'url does not exist'
        };
    } catch (error) {
        return `Can not get url : ${error}`;
    }
};

export function playButtonSound(): void {
    // Play the button sound effect
    buttonSound.play();
};

export function playrainEffect(): void {
    rainEffect.play();
};

export function playBackgroundMusic(): void {
    // Play the background music
    if (wasPlayingBefore === true) {
        if (MusicVolume) {
            bgMusic.volume = MusicVolume;
            bgMusic.currentTime = 0;
            bgMusic.play();
            isPlaying = true;
            wasPlayingBefore = false;
        } else {
            bgMusic.currentTime = 0;
            bgMusic.play();
            isPlaying = true;
            wasPlayingBefore = false;
        }
    } else {
        isPlaying = true;
        if (MusicVolume) {
            bgMusic.volume = MusicVolume;
            bgMusic.play();
        } else {
            bgMusic.play();
        }
    }
};

export function playInputPlayerName(): void {
    NameInputMusic.currentTime = 0;
    NameInputMusic.play();
};

export function playPrologue(): void {
    prologue.currentTime = 0;
    prologue.play();
}

export function stopPrologue(): void {
    prologue.pause();
}

export function playbgMusicEnd(): void {
    bgMusicEnd.play();
}

export function playสวัสดดีค้าบEffect(): void {
    สวัสดีค้าบ.play();
}

export async function stopAllMusic() {
    await bgMusic.pause();
    await bgMusicEnd.pause();
    await NameInputMusic.pause();
    await prologue.pause();
}

export async function stopAllMusicPlus() {
    await NameInputMusic.pause();
    await prologue.pause();
    wasPlayingBefore = true;
}

export function setVolumeBackgroundMusic(volume: number): void {
    MusicVolume = volume;
    //adjust Volume of bg music
    if (volume >= 0 && volume <= 1) {
        bgMusic.volume = volume;
        bgMusicEnd.volume = volume;
        NameInputMusic.volume = volume;
        prologue.volume = volume;
    };
};

export function setVolumeEffect(volume: number): void {
    EffectVolume = volume;
    //adjust Volume of bg music
    if (volume >= 0 && volume <= 1) {
        buttonSound.volume = volume;
        rainEffect.volume = volume;
        dialogEffect.volume = volume;
    };
};

export function DecodeStage(state: number, seed: string, lastEvent: string) {
    let event: object;
    for (let number of seed) {

    }
    /*
    23
    215342
    //
    21
    534222
    2351
    //
    12
    23
    52

    */
}

export async function playDialogEffect(delay: number) {
    const delayFunc = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
    dialogEffect.play();
    await delayFunc(delay);
    dialogEffect.pause();
    dialogEffect.currentTime = 0;
}

export async function stopDialogEffect() {
    dialogEffect.pause();
    dialogEffect.currentTime = 0;
}

export async function generateDialog(playerName: string, stage: number, map?: string) {

    const messageSet = [
        {
            "key": "prologue",
            "message": [
                `You're an adventurer name's ${playerName}`,
                `who want to Clear the hardest dungeon in this world...`,
                `and now... you are at the entrance of Dark Dungeon`,
                `wanna go in?`
            ],
            "advMessage" : `Type 'Go in'`
        }
    ];
    switch (stage) {
        case 0:
            return messageSet[0];
        default:
            return `${playerName}`
    }
}